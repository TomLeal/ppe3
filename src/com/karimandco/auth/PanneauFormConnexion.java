/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.auth;

import com.karimandco.pdf.VoirPdf;
import com.karimandco.pdf.Pdf;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import javax.swing.JLabel;
import ppe.Fenetre;
import ppe.FenetreConnexion;
import com.karimandco.bdd.DaoSIO;
import com.karimandco.mdp.MotDePasse;

/**
 *
 * @author Damien F, Pawel R, Théo M
 */
public class PanneauFormConnexion extends javax.swing.JPanel {

    private Boolean identifiantOK = false;
    private FenetreConnexion fenCo;
    private Fenetre fen;
    private javax.swing.JDialog panneauPereConnexion;
    
    private Boolean connexionOK = false;

    public void setIdentifiantOK(Boolean identifiantOK) {
        this.identifiantOK = identifiantOK;
    }


    public void setFenCo(FenetreConnexion fenCo) {
        this.fenCo = fenCo;
    }

    public void setFen(Fenetre fen) {
        this.fen = fen;
    }

    public void setFenParentConnexion(javax.swing.JDialog i) {
        this.panneauPereConnexion = i;
    }

    public PanneauChamp getPanneauIdentifiant() {
        return panneauIdentifiant;
    }

    public JLabel getjLabelEtatConnexion() {
        return jLabelEtatConnexion;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }
    
    public javax.swing.JButton getjButtonConnexion() {
        return jButtonConnexion;
    }
    
    public Boolean getConnexionOK() {
        return connexionOK;
    }

    public void setConnexionOK(Boolean connexionOK) {
        this.connexionOK = connexionOK;
    }

    public MotDePasse getMotDePasse() {
        return motDePasse;
    }
    

    /**
     * Ce constructeur permet d'initialiser le nom des labels et de générer les
     * KeyListener pour capturer les actions.
     */
    public PanneauFormConnexion() {
        initComponents();

        panneauIdentifiant.setjLabelNomChamp("Identifiant");
       

        panneauIdentifiant.getChamp2().addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyPressed(KeyEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

                if (!panneauIdentifiant.getChamp2().getText().equals("")) {
                    if (panneauIdentifiant.getChamp2().verifIdentifiant()) {
                        panneauIdentifiant.setjLabelEtatChamp(Color.blue);
                        panneauIdentifiant.setjLabelEtatChamp("Format ok");
                        setIdentifiantOK(true);
                    } else {
                        panneauIdentifiant.setjLabelEtatChamp(Color.red);
                        panneauIdentifiant.setjLabelEtatChamp("Format non ok");
                        setIdentifiantOK(false);
                    }
                } else {
                    panneauIdentifiant.setjLabelEtatChamp(Color.black);
                    panneauIdentifiant.setjLabelEtatChamp("");
                    setIdentifiantOK(false);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panneauIdentifiant = new com.karimandco.auth.PanneauChamp();
        jButtonConnexion = new javax.swing.JButton();
        jLabelEtatConnexion = new javax.swing.JLabel();
        motDePasse = new com.karimandco.mdp.MotDePasse();

        setBackground(new java.awt.Color(255, 255, 255));

        jButtonConnexion.setBackground(new java.awt.Color(0, 0, 0));
        jButtonConnexion.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 12)); // NOI18N
        jButtonConnexion.setForeground(new java.awt.Color(255, 255, 255));
        jButtonConnexion.setText("Se connecter");
        jButtonConnexion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnexionActionPerformed(evt);
            }
        });

        jLabelEtatConnexion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(motDePasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEtatConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jButtonConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(panneauIdentifiant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabelEtatConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panneauIdentifiant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(motDePasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButtonConnexion)
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnexionActionPerformed
        if (identifiantOK && motDePasse.verifMDP()) {
            String mdpCrypter = Cryptage.sha256(String.valueOf(this.motDePasse.recupMDP()));
            mdpCrypter = Cryptage.sha256(mdpCrypter);
            ResultSet lesResultats = DaoSIO.getInstance().requeteSelection("SELECT identifiant FROM utilisateurs WHERE identifiant='" + this.panneauIdentifiant.getChamp2().getText() + "' AND mot_de_passe='" + mdpCrypter + "'");
            try {
                if (lesResultats.next()) {
                    //Id du CV
                    Integer idCV = null;

                    //Requete SQL pour Id du CV
                    //ResultSet resultIdCV = DaoSIO.getInstance().requeteSelection("SELECT id FROM cv WHERE id_utilisateur=" + lesResultats.getInt("id"));
                    //Utilisateur util = new Utilisateur(lesResultats.getInt("id"), lesResultats.getString("prenom"), lesResultats.getString("nom"), lesResultats.getString("num_telephone"), lesResultats.getString("courriel"));
                    Utilisateur util = new Utilisateur();
                    Utilisateur.setIdentifiant(lesResultats.getString("identifiant"));
                    util.chargerInformationsUtilisateur();

                    //Vérifie qu'il y a un CV
                    fen.getCreationDuCV().setIdUtilisateur(util.getId());
//                    try{
//                        
//                        idCV = resultIdCV.getInt("id");
//                        fen.getCreationDuCV().setIdCV(235);
//                    }catch(Exception e){
//                        System.out.println(e);
//                    }

                    fen.getCreationDuCV().setIdCV(16);

                    //Ajoute l'utilisateur dans la fenêtre
                    fen.setUtilisateur(util);

                    //Affiche un texte, vide le champ mdp et cache la fenetre CONNEXION
                    jLabelEtatConnexion.setForeground(Color.blue);
                    jLabelEtatConnexion.setText("Connexion réussie");
                    fenCo.setVisible(false);
                    this.motDePasse.getjLabelResultat().setText("");

                    //A REMPLACER - rentre les informations dans la fenêtre
                    fen.setNom(util.getNom());
                    fen.setPrenom(util.getPrenom());
                    fen.setNumTel(util.getNumeroTelephone());
                    fen.setCourriel("test@gmail.com");
                    System.out.println(util.getId());
                    fen.getCreationDuCV().getVoirPdf().pdf2.setIdUtilisateur(util.getId());
                    
                    if (util.getStatut()==Utilisateur.ADMIN) {
                        fen.getPanneauAdministration().updateJTableInfo();
                    }

                    fen.setVisible(true);
                } else {
                    jLabelEtatConnexion.setForeground(Color.red);
                    jLabelEtatConnexion.setText("Identifiant et/ou mot de passe incorrect(s)");
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jButtonConnexionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnexion;
    private javax.swing.JLabel jLabelEtatConnexion;
    private com.karimandco.mdp.MotDePasse motDePasse;
    private com.karimandco.auth.PanneauChamp panneauIdentifiant;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JLabel jLabel1;
}
